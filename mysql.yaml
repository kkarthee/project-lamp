# By Sharon Campbell, Ken Simon, and Joe Beda for Heptio
# create and claim a persistent volume for our pod
# this works because we enabled cloud-provider=aws
# so it can create a disk for itself
# if you create a persistent volume another way
# name it "database" and make sure the cluster has access

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database
  labels:
    "heptio.com/example": lamp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    "heptio.com/example": lamp
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql
        name: mysql
        resources:
          requests:
            cpu: 1
            memory: 1Gi
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              # in this case, the Secret with the name: mysql-credentials
              secretKeyRef:
                name: mysql-credentials
                key: rootpw
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: password
          - name: MYSQL_DATABASE
            value: sakila
        livenessProbe:
          tcpSocket:
            port: 3306
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          subPath: data
          name: database
      volumes:
      - name: database
        persistentVolumeClaim:
          claimName: database

---
# expose a pod on mysql.default.svc.cluster.local to the rest of the cluster

apiVersion: v1
# https://kubernetes.io/docs/concepts/services-networking/service/
kind: Service
metadata:
  # the name mysql here means you can reference the pod
  # using the host mysql.default.svc.cluster.local from within the cluster
  name: mysql
  labels:
    "heptio.com/example": lamp
spec:
  # allows us to set our own internal IP to reference this pod
  # in this case we care about the port
  # https://kubernetes.io/docs/concepts/services-networking/service/#choosing-your-own-ip-address
  type: ClusterIP
  ports:
  # make the service available on this port within the cluster
  - port: 3306
    protocol: TCP
  # apply this service to the pod with the label app: mysql
  selector:
    app: mysql
